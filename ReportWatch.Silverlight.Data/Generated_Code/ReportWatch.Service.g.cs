//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.239
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ReportWatch.Database
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.ServiceModel;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    using System.ServiceModel.Web;
    using System.Xml.Serialization;
    
    
    /// <summary>
    /// The 'DayPrice' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/ReportWatch.Database")]
    public sealed partial class DayPrice : Entity
    {
        
        private decimal _dayPriceAdjustedClose;
        
        private decimal _dayPriceClose;
        
        private DateTime _dayPriceDate;
        
        private decimal _dayPriceHigh;
        
        private Guid _dayPriceId;
        
        private decimal _dayPriceLow;
        
        private decimal _dayPriceOpen;
        
        private long _dayPriceVolume;
        
        private EntityRef<Symbol> _symbol;
        
        private string _symbolName;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnDayPriceAdjustedCloseChanging(decimal value);
        partial void OnDayPriceAdjustedCloseChanged();
        partial void OnDayPriceCloseChanging(decimal value);
        partial void OnDayPriceCloseChanged();
        partial void OnDayPriceDateChanging(DateTime value);
        partial void OnDayPriceDateChanged();
        partial void OnDayPriceHighChanging(decimal value);
        partial void OnDayPriceHighChanged();
        partial void OnDayPriceIdChanging(Guid value);
        partial void OnDayPriceIdChanged();
        partial void OnDayPriceLowChanging(decimal value);
        partial void OnDayPriceLowChanged();
        partial void OnDayPriceOpenChanging(decimal value);
        partial void OnDayPriceOpenChanged();
        partial void OnDayPriceVolumeChanging(long value);
        partial void OnDayPriceVolumeChanged();
        partial void OnSymbolNameChanging(string value);
        partial void OnSymbolNameChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="DayPrice"/> class.
        /// </summary>
        public DayPrice()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'DayPriceAdjustedClose' value.
        /// </summary>
        [DataMember()]
        public decimal DayPriceAdjustedClose
        {
            get
            {
                return this._dayPriceAdjustedClose;
            }
            set
            {
                if ((this._dayPriceAdjustedClose != value))
                {
                    this.OnDayPriceAdjustedCloseChanging(value);
                    this.RaiseDataMemberChanging("DayPriceAdjustedClose");
                    this.ValidateProperty("DayPriceAdjustedClose", value);
                    this._dayPriceAdjustedClose = value;
                    this.RaiseDataMemberChanged("DayPriceAdjustedClose");
                    this.OnDayPriceAdjustedCloseChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DayPriceClose' value.
        /// </summary>
        [DataMember()]
        public decimal DayPriceClose
        {
            get
            {
                return this._dayPriceClose;
            }
            set
            {
                if ((this._dayPriceClose != value))
                {
                    this.OnDayPriceCloseChanging(value);
                    this.RaiseDataMemberChanging("DayPriceClose");
                    this.ValidateProperty("DayPriceClose", value);
                    this._dayPriceClose = value;
                    this.RaiseDataMemberChanged("DayPriceClose");
                    this.OnDayPriceCloseChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DayPriceDate' value.
        /// </summary>
        [DataMember()]
        public DateTime DayPriceDate
        {
            get
            {
                return this._dayPriceDate;
            }
            set
            {
                if ((this._dayPriceDate != value))
                {
                    this.OnDayPriceDateChanging(value);
                    this.RaiseDataMemberChanging("DayPriceDate");
                    this.ValidateProperty("DayPriceDate", value);
                    this._dayPriceDate = value;
                    this.RaiseDataMemberChanged("DayPriceDate");
                    this.OnDayPriceDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DayPriceHigh' value.
        /// </summary>
        [DataMember()]
        public decimal DayPriceHigh
        {
            get
            {
                return this._dayPriceHigh;
            }
            set
            {
                if ((this._dayPriceHigh != value))
                {
                    this.OnDayPriceHighChanging(value);
                    this.RaiseDataMemberChanging("DayPriceHigh");
                    this.ValidateProperty("DayPriceHigh", value);
                    this._dayPriceHigh = value;
                    this.RaiseDataMemberChanged("DayPriceHigh");
                    this.OnDayPriceHighChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DayPriceId' value.
        /// </summary>
        [DataMember()]
        [Key()]
        [RoundtripOriginal()]
        public Guid DayPriceId
        {
            get
            {
                return this._dayPriceId;
            }
            set
            {
                if ((this._dayPriceId != value))
                {
                    this.OnDayPriceIdChanging(value);
                    this.RaiseDataMemberChanging("DayPriceId");
                    this.ValidateProperty("DayPriceId", value);
                    this._dayPriceId = value;
                    this.RaiseDataMemberChanged("DayPriceId");
                    this.OnDayPriceIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DayPriceLow' value.
        /// </summary>
        [DataMember()]
        public decimal DayPriceLow
        {
            get
            {
                return this._dayPriceLow;
            }
            set
            {
                if ((this._dayPriceLow != value))
                {
                    this.OnDayPriceLowChanging(value);
                    this.RaiseDataMemberChanging("DayPriceLow");
                    this.ValidateProperty("DayPriceLow", value);
                    this._dayPriceLow = value;
                    this.RaiseDataMemberChanged("DayPriceLow");
                    this.OnDayPriceLowChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DayPriceOpen' value.
        /// </summary>
        [DataMember()]
        public decimal DayPriceOpen
        {
            get
            {
                return this._dayPriceOpen;
            }
            set
            {
                if ((this._dayPriceOpen != value))
                {
                    this.OnDayPriceOpenChanging(value);
                    this.RaiseDataMemberChanging("DayPriceOpen");
                    this.ValidateProperty("DayPriceOpen", value);
                    this._dayPriceOpen = value;
                    this.RaiseDataMemberChanged("DayPriceOpen");
                    this.OnDayPriceOpenChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DayPriceVolume' value.
        /// </summary>
        [DataMember()]
        public long DayPriceVolume
        {
            get
            {
                return this._dayPriceVolume;
            }
            set
            {
                if ((this._dayPriceVolume != value))
                {
                    this.OnDayPriceVolumeChanging(value);
                    this.RaiseDataMemberChanging("DayPriceVolume");
                    this.ValidateProperty("DayPriceVolume", value);
                    this._dayPriceVolume = value;
                    this.RaiseDataMemberChanged("DayPriceVolume");
                    this.OnDayPriceVolumeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Symbol"/> entity.
        /// </summary>
        [Association("Symbol_DayPrice", "SymbolName", "SymbolName", IsForeignKey=true)]
        [XmlIgnore()]
        public Symbol Symbol
        {
            get
            {
                if ((this._symbol == null))
                {
                    this._symbol = new EntityRef<Symbol>(this, "Symbol", this.FilterSymbol);
                }
                return this._symbol.Entity;
            }
            set
            {
                Symbol previous = this.Symbol;
                if ((previous != value))
                {
                    this.ValidateProperty("Symbol", value);
                    if ((previous != null))
                    {
                        this._symbol.Entity = null;
                        previous.DayPriceSet.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.SymbolName = value.SymbolName;
                    }
                    else
                    {
                        this.SymbolName = default(string);
                    }
                    this._symbol.Entity = value;
                    if ((value != null))
                    {
                        value.DayPriceSet.Add(this);
                    }
                    this.RaisePropertyChanged("Symbol");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SymbolName' value.
        /// </summary>
        [DataMember()]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(10)]
        public string SymbolName
        {
            get
            {
                return this._symbolName;
            }
            set
            {
                if ((this._symbolName != value))
                {
                    this.OnSymbolNameChanging(value);
                    this.RaiseDataMemberChanging("SymbolName");
                    this.ValidateProperty("SymbolName", value);
                    this._symbolName = value;
                    this.RaiseDataMemberChanged("SymbolName");
                    this.OnSymbolNameChanged();
                }
            }
        }
        
        private bool FilterSymbol(Symbol entity)
        {
            return (entity.SymbolName == this.SymbolName);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            if ((this._symbolName == null))
            {
                return null;
            }
            return EntityKey.Create(this._dayPriceId, this._symbolName);
        }
    }
    
    /// <summary>
    /// The 'ExceptionLog' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/ReportWatch.Database")]
    public sealed partial class ExceptionLog : Entity
    {
        
        private DateTime _exceptionLogDate;
        
        private Guid _exceptionLogId;
        
        private string _exceptionLogMessage;
        
        private string _exceptionLogStackTrace;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnExceptionLogDateChanging(DateTime value);
        partial void OnExceptionLogDateChanged();
        partial void OnExceptionLogIdChanging(Guid value);
        partial void OnExceptionLogIdChanged();
        partial void OnExceptionLogMessageChanging(string value);
        partial void OnExceptionLogMessageChanged();
        partial void OnExceptionLogStackTraceChanging(string value);
        partial void OnExceptionLogStackTraceChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ExceptionLog"/> class.
        /// </summary>
        public ExceptionLog()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'ExceptionLogDate' value.
        /// </summary>
        [DataMember()]
        public DateTime ExceptionLogDate
        {
            get
            {
                return this._exceptionLogDate;
            }
            set
            {
                if ((this._exceptionLogDate != value))
                {
                    this.OnExceptionLogDateChanging(value);
                    this.RaiseDataMemberChanging("ExceptionLogDate");
                    this.ValidateProperty("ExceptionLogDate", value);
                    this._exceptionLogDate = value;
                    this.RaiseDataMemberChanged("ExceptionLogDate");
                    this.OnExceptionLogDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ExceptionLogId' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public Guid ExceptionLogId
        {
            get
            {
                return this._exceptionLogId;
            }
            set
            {
                if ((this._exceptionLogId != value))
                {
                    this.OnExceptionLogIdChanging(value);
                    this.ValidateProperty("ExceptionLogId", value);
                    this._exceptionLogId = value;
                    this.RaisePropertyChanged("ExceptionLogId");
                    this.OnExceptionLogIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ExceptionLogMessage' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(255)]
        public string ExceptionLogMessage
        {
            get
            {
                return this._exceptionLogMessage;
            }
            set
            {
                if ((this._exceptionLogMessage != value))
                {
                    this.OnExceptionLogMessageChanging(value);
                    this.RaiseDataMemberChanging("ExceptionLogMessage");
                    this.ValidateProperty("ExceptionLogMessage", value);
                    this._exceptionLogMessage = value;
                    this.RaiseDataMemberChanged("ExceptionLogMessage");
                    this.OnExceptionLogMessageChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ExceptionLogStackTrace' value.
        /// </summary>
        [DataMember()]
        [Required()]
        public string ExceptionLogStackTrace
        {
            get
            {
                return this._exceptionLogStackTrace;
            }
            set
            {
                if ((this._exceptionLogStackTrace != value))
                {
                    this.OnExceptionLogStackTraceChanging(value);
                    this.RaiseDataMemberChanging("ExceptionLogStackTrace");
                    this.ValidateProperty("ExceptionLogStackTrace", value);
                    this._exceptionLogStackTrace = value;
                    this.RaiseDataMemberChanged("ExceptionLogStackTrace");
                    this.OnExceptionLogStackTraceChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._exceptionLogId;
        }
    }
    
    /// <summary>
    /// The 'Report' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/ReportWatch.Database")]
    public sealed partial class Report : Entity
    {
        
        private decimal _dayPriceHigh;
        
        private decimal _reportActual;
        
        private DateTime _reportDate;
        
        private decimal _reportExpected;
        
        private Guid _reportId;
        
        private string _reportName;
        
        private decimal _reportPreviousYear;
        
        private string _reportTitle;
        
        private EntityRef<Symbol> _symbol;
        
        private string _symbolName;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnDayPriceHighChanging(decimal value);
        partial void OnDayPriceHighChanged();
        partial void OnReportActualChanging(decimal value);
        partial void OnReportActualChanged();
        partial void OnReportDateChanging(DateTime value);
        partial void OnReportDateChanged();
        partial void OnReportExpectedChanging(decimal value);
        partial void OnReportExpectedChanged();
        partial void OnReportIdChanging(Guid value);
        partial void OnReportIdChanged();
        partial void OnReportNameChanging(string value);
        partial void OnReportNameChanged();
        partial void OnReportPreviousYearChanging(decimal value);
        partial void OnReportPreviousYearChanged();
        partial void OnReportTitleChanging(string value);
        partial void OnReportTitleChanged();
        partial void OnSymbolNameChanging(string value);
        partial void OnSymbolNameChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Report"/> class.
        /// </summary>
        public Report()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'DayPriceHigh' value.
        /// </summary>
        [DataMember()]
        public decimal DayPriceHigh
        {
            get
            {
                return this._dayPriceHigh;
            }
            set
            {
                if ((this._dayPriceHigh != value))
                {
                    this.OnDayPriceHighChanging(value);
                    this.RaiseDataMemberChanging("DayPriceHigh");
                    this.ValidateProperty("DayPriceHigh", value);
                    this._dayPriceHigh = value;
                    this.RaiseDataMemberChanged("DayPriceHigh");
                    this.OnDayPriceHighChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ReportActual' value.
        /// </summary>
        [DataMember()]
        public decimal ReportActual
        {
            get
            {
                return this._reportActual;
            }
            set
            {
                if ((this._reportActual != value))
                {
                    this.OnReportActualChanging(value);
                    this.RaiseDataMemberChanging("ReportActual");
                    this.ValidateProperty("ReportActual", value);
                    this._reportActual = value;
                    this.RaiseDataMemberChanged("ReportActual");
                    this.OnReportActualChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ReportDate' value.
        /// </summary>
        [DataMember()]
        public DateTime ReportDate
        {
            get
            {
                return this._reportDate;
            }
            set
            {
                if ((this._reportDate != value))
                {
                    this.OnReportDateChanging(value);
                    this.RaiseDataMemberChanging("ReportDate");
                    this.ValidateProperty("ReportDate", value);
                    this._reportDate = value;
                    this.RaiseDataMemberChanged("ReportDate");
                    this.OnReportDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ReportExpected' value.
        /// </summary>
        [DataMember()]
        public decimal ReportExpected
        {
            get
            {
                return this._reportExpected;
            }
            set
            {
                if ((this._reportExpected != value))
                {
                    this.OnReportExpectedChanging(value);
                    this.RaiseDataMemberChanging("ReportExpected");
                    this.ValidateProperty("ReportExpected", value);
                    this._reportExpected = value;
                    this.RaiseDataMemberChanged("ReportExpected");
                    this.OnReportExpectedChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ReportId' value.
        /// </summary>
        [DataMember()]
        [Key()]
        [RoundtripOriginal()]
        public Guid ReportId
        {
            get
            {
                return this._reportId;
            }
            set
            {
                if ((this._reportId != value))
                {
                    this.OnReportIdChanging(value);
                    this.RaiseDataMemberChanging("ReportId");
                    this.ValidateProperty("ReportId", value);
                    this._reportId = value;
                    this.RaiseDataMemberChanged("ReportId");
                    this.OnReportIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ReportName' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(10)]
        public string ReportName
        {
            get
            {
                return this._reportName;
            }
            set
            {
                if ((this._reportName != value))
                {
                    this.OnReportNameChanging(value);
                    this.RaiseDataMemberChanging("ReportName");
                    this.ValidateProperty("ReportName", value);
                    this._reportName = value;
                    this.RaiseDataMemberChanged("ReportName");
                    this.OnReportNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ReportPreviousYear' value.
        /// </summary>
        [DataMember()]
        public decimal ReportPreviousYear
        {
            get
            {
                return this._reportPreviousYear;
            }
            set
            {
                if ((this._reportPreviousYear != value))
                {
                    this.OnReportPreviousYearChanging(value);
                    this.RaiseDataMemberChanging("ReportPreviousYear");
                    this.ValidateProperty("ReportPreviousYear", value);
                    this._reportPreviousYear = value;
                    this.RaiseDataMemberChanged("ReportPreviousYear");
                    this.OnReportPreviousYearChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ReportTitle' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(100)]
        public string ReportTitle
        {
            get
            {
                return this._reportTitle;
            }
            set
            {
                if ((this._reportTitle != value))
                {
                    this.OnReportTitleChanging(value);
                    this.RaiseDataMemberChanging("ReportTitle");
                    this.ValidateProperty("ReportTitle", value);
                    this._reportTitle = value;
                    this.RaiseDataMemberChanged("ReportTitle");
                    this.OnReportTitleChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Symbol"/> entity.
        /// </summary>
        [Association("Symbol_Report", "SymbolName", "SymbolName", IsForeignKey=true)]
        [XmlIgnore()]
        public Symbol Symbol
        {
            get
            {
                if ((this._symbol == null))
                {
                    this._symbol = new EntityRef<Symbol>(this, "Symbol", this.FilterSymbol);
                }
                return this._symbol.Entity;
            }
            set
            {
                Symbol previous = this.Symbol;
                if ((previous != value))
                {
                    this.ValidateProperty("Symbol", value);
                    if ((previous != null))
                    {
                        this._symbol.Entity = null;
                        previous.ReportSet.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.SymbolName = value.SymbolName;
                    }
                    else
                    {
                        this.SymbolName = default(string);
                    }
                    this._symbol.Entity = value;
                    if ((value != null))
                    {
                        value.ReportSet.Add(this);
                    }
                    this.RaisePropertyChanged("Symbol");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SymbolName' value.
        /// </summary>
        [DataMember()]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(10)]
        public string SymbolName
        {
            get
            {
                return this._symbolName;
            }
            set
            {
                if ((this._symbolName != value))
                {
                    this.OnSymbolNameChanging(value);
                    this.RaiseDataMemberChanging("SymbolName");
                    this.ValidateProperty("SymbolName", value);
                    this._symbolName = value;
                    this.RaiseDataMemberChanged("SymbolName");
                    this.OnSymbolNameChanged();
                }
            }
        }
        
        private bool FilterSymbol(Symbol entity)
        {
            return (entity.SymbolName == this.SymbolName);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            if ((this._symbolName == null))
            {
                return null;
            }
            return EntityKey.Create(this._reportId, this._symbolName);
        }
    }
    
    /// <summary>
    /// The DomainContext corresponding to the 'ReportWatchDomainService' DomainService.
    /// </summary>
    public sealed partial class ReportWatchDomainContext : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ReportWatchDomainContext"/> class.
        /// </summary>
        public ReportWatchDomainContext() : 
                this(new WebDomainClient<IReportWatchDomainServiceContract>(new Uri("ReportWatch-Database-ReportWatchDomainService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ReportWatchDomainContext"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The ReportWatchDomainService service URI.</param>
        public ReportWatchDomainContext(Uri serviceUri) : 
                this(new WebDomainClient<IReportWatchDomainServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ReportWatchDomainContext"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public ReportWatchDomainContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="DayPrice"/> entity instances that have been loaded into this <see cref="ReportWatchDomainContext"/> instance.
        /// </summary>
        public EntitySet<DayPrice> DayPrices
        {
            get
            {
                return base.EntityContainer.GetEntitySet<DayPrice>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="ExceptionLog"/> entity instances that have been loaded into this <see cref="ReportWatchDomainContext"/> instance.
        /// </summary>
        public EntitySet<ExceptionLog> ExceptionLogs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<ExceptionLog>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Report"/> entity instances that have been loaded into this <see cref="ReportWatchDomainContext"/> instance.
        /// </summary>
        public EntitySet<Report> Reports
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Report>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Symbol"/> entity instances that have been loaded into this <see cref="ReportWatchDomainContext"/> instance.
        /// </summary>
        public EntitySet<Symbol> Symbols
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Symbol>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="DayPrice"/> entity instances using the 'GetDayPriceSet' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="DayPrice"/> entity instances.</returns>
        public EntityQuery<DayPrice> GetDayPriceSetQuery()
        {
            this.ValidateMethod("GetDayPriceSetQuery", null);
            return base.CreateQuery<DayPrice>("GetDayPriceSet", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="ExceptionLog"/> entity instances using the 'GetExceptionLogSet' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="ExceptionLog"/> entity instances.</returns>
        public EntityQuery<ExceptionLog> GetExceptionLogSetQuery()
        {
            this.ValidateMethod("GetExceptionLogSetQuery", null);
            return base.CreateQuery<ExceptionLog>("GetExceptionLogSet", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Report"/> entity instances using the 'GetReportSet' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Report"/> entity instances.</returns>
        public EntityQuery<Report> GetReportSetQuery()
        {
            this.ValidateMethod("GetReportSetQuery", null);
            return base.CreateQuery<Report>("GetReportSet", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Symbol"/> entity instances using the 'GetSymbolSet' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Symbol"/> entity instances.</returns>
        public EntityQuery<Symbol> GetSymbolSetQuery()
        {
            this.ValidateMethod("GetSymbolSetQuery", null);
            return base.CreateQuery<Symbol>("GetSymbolSet", null, false, true);
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new ReportWatchDomainContextEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'ReportWatchDomainService' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface IReportWatchDomainServiceContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetDayPriceSet' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/ReportWatchDomainService/GetDayPriceSetDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/ReportWatchDomainService/GetDayPriceSet", ReplyAction="http://tempuri.org/ReportWatchDomainService/GetDayPriceSetResponse")]
            [WebGet()]
            IAsyncResult BeginGetDayPriceSet(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetDayPriceSet'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetDayPriceSet'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetDayPriceSet' operation.</returns>
            QueryResult<DayPrice> EndGetDayPriceSet(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetExceptionLogSet' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/ReportWatchDomainService/GetExceptionLogSetDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/ReportWatchDomainService/GetExceptionLogSet", ReplyAction="http://tempuri.org/ReportWatchDomainService/GetExceptionLogSetResponse")]
            [WebGet()]
            IAsyncResult BeginGetExceptionLogSet(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetExceptionLogSet'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetExceptionLogSet'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetExceptionLogSet' operation.</returns>
            QueryResult<ExceptionLog> EndGetExceptionLogSet(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetReportSet' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/ReportWatchDomainService/GetReportSetDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/ReportWatchDomainService/GetReportSet", ReplyAction="http://tempuri.org/ReportWatchDomainService/GetReportSetResponse")]
            [WebGet()]
            IAsyncResult BeginGetReportSet(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetReportSet'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetReportSet'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetReportSet' operation.</returns>
            QueryResult<Report> EndGetReportSet(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetSymbolSet' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/ReportWatchDomainService/GetSymbolSetDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/ReportWatchDomainService/GetSymbolSet", ReplyAction="http://tempuri.org/ReportWatchDomainService/GetSymbolSetResponse")]
            [WebGet()]
            IAsyncResult BeginGetSymbolSet(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetSymbolSet'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetSymbolSet'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetSymbolSet' operation.</returns>
            QueryResult<Symbol> EndGetSymbolSet(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SubmitChanges' operation.
            /// </summary>
            /// <param name="changeSet">The change-set to submit.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/ReportWatchDomainService/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/ReportWatchDomainService/SubmitChanges", ReplyAction="http://tempuri.org/ReportWatchDomainService/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            /// <returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class ReportWatchDomainContextEntityContainer : EntityContainer
        {
            
            public ReportWatchDomainContextEntityContainer()
            {
                this.CreateEntitySet<DayPrice>(EntitySetOperations.All);
                this.CreateEntitySet<ExceptionLog>(EntitySetOperations.All);
                this.CreateEntitySet<Report>(EntitySetOperations.All);
                this.CreateEntitySet<Symbol>(EntitySetOperations.All);
            }
        }
    }
    
    /// <summary>
    /// The 'Symbol' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/ReportWatch.Database")]
    public sealed partial class Symbol : Entity
    {
        
        private string _companyName;
        
        private EntityCollection<DayPrice> _dayPriceSet;
        
        private string _indexSymbolName;
        
        private Nullable<DateTime> _reportDate;
        
        private EntityCollection<Report> _reportSet;
        
        private string _symbolName;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCompanyNameChanging(string value);
        partial void OnCompanyNameChanged();
        partial void OnIndexSymbolNameChanging(string value);
        partial void OnIndexSymbolNameChanged();
        partial void OnReportDateChanging(Nullable<DateTime> value);
        partial void OnReportDateChanged();
        partial void OnSymbolNameChanging(string value);
        partial void OnSymbolNameChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Symbol"/> class.
        /// </summary>
        public Symbol()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'CompanyName' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(250)]
        public string CompanyName
        {
            get
            {
                return this._companyName;
            }
            set
            {
                if ((this._companyName != value))
                {
                    this.OnCompanyNameChanging(value);
                    this.RaiseDataMemberChanging("CompanyName");
                    this.ValidateProperty("CompanyName", value);
                    this._companyName = value;
                    this.RaiseDataMemberChanged("CompanyName");
                    this.OnCompanyNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="DayPrice"/> entity instances.
        /// </summary>
        [Association("Symbol_DayPrice", "SymbolName", "SymbolName")]
        [XmlIgnore()]
        public EntityCollection<DayPrice> DayPriceSet
        {
            get
            {
                if ((this._dayPriceSet == null))
                {
                    this._dayPriceSet = new EntityCollection<DayPrice>(this, "DayPriceSet", this.FilterDayPriceSet, this.AttachDayPriceSet, this.DetachDayPriceSet);
                }
                return this._dayPriceSet;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IndexSymbolName' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(10)]
        public string IndexSymbolName
        {
            get
            {
                return this._indexSymbolName;
            }
            set
            {
                if ((this._indexSymbolName != value))
                {
                    this.OnIndexSymbolNameChanging(value);
                    this.RaiseDataMemberChanging("IndexSymbolName");
                    this.ValidateProperty("IndexSymbolName", value);
                    this._indexSymbolName = value;
                    this.RaiseDataMemberChanged("IndexSymbolName");
                    this.OnIndexSymbolNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ReportDate' value.
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> ReportDate
        {
            get
            {
                return this._reportDate;
            }
            set
            {
                if ((this._reportDate != value))
                {
                    this.OnReportDateChanging(value);
                    this.RaiseDataMemberChanging("ReportDate");
                    this.ValidateProperty("ReportDate", value);
                    this._reportDate = value;
                    this.RaiseDataMemberChanged("ReportDate");
                    this.OnReportDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Report"/> entity instances.
        /// </summary>
        [Association("Symbol_Report", "SymbolName", "SymbolName")]
        [XmlIgnore()]
        public EntityCollection<Report> ReportSet
        {
            get
            {
                if ((this._reportSet == null))
                {
                    this._reportSet = new EntityCollection<Report>(this, "ReportSet", this.FilterReportSet, this.AttachReportSet, this.DetachReportSet);
                }
                return this._reportSet;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SymbolName' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(10)]
        public string SymbolName
        {
            get
            {
                return this._symbolName;
            }
            set
            {
                if ((this._symbolName != value))
                {
                    this.OnSymbolNameChanging(value);
                    this.ValidateProperty("SymbolName", value);
                    this._symbolName = value;
                    this.RaisePropertyChanged("SymbolName");
                    this.OnSymbolNameChanged();
                }
            }
        }
        
        private void AttachDayPriceSet(DayPrice entity)
        {
            entity.Symbol = this;
        }
        
        private void DetachDayPriceSet(DayPrice entity)
        {
            entity.Symbol = null;
        }
        
        private bool FilterDayPriceSet(DayPrice entity)
        {
            return (entity.SymbolName == this.SymbolName);
        }
        
        private void AttachReportSet(Report entity)
        {
            entity.Symbol = this;
        }
        
        private void DetachReportSet(Report entity)
        {
            entity.Symbol = null;
        }
        
        private bool FilterReportSet(Report entity)
        {
            return (entity.SymbolName == this.SymbolName);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._symbolName;
        }
    }
}
